name: Cross-Platform Build and Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.0.0)'
        required: false
        default: 'latest'
      release_type:
        description: 'Release type'
        required: false
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production
  push:
    tags:
      - 'v*'
    branches:
      - main
      - develop
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  APP_NAME: 'CSC-Reach'

jobs:
  # Job 1: Run tests and quality checks
  test-and-quality:
    runs-on: ubuntu-latest
    outputs:
      should-build: ${{ steps.check.outputs.should-build }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -e ".[dev]"
        
    - name: Run code quality checks
      run: |
        echo "üîç Running code quality checks..."
        
        # Check code formatting with black
        echo "Checking code formatting..."
        black --check src/ tests/ || echo "‚ö†Ô∏è Code formatting issues found"
        
        # Run flake8 for linting
        echo "Running linting checks..."
        flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503 || echo "‚ö†Ô∏è Linting issues found"
        
        # Type checking with mypy (if configured)
        echo "Running type checks..."
        mypy src/ --ignore-missing-imports || echo "‚ö†Ô∏è Type checking issues found"
        
    - name: Run unit tests
      run: |
        echo "üß™ Running unit tests..."
        pytest tests/unit/ -v --tb=short || echo "‚ö†Ô∏è Some unit tests failed"
        
    - name: Run integration tests
      run: |
        echo "üîó Running integration tests..."
        pytest tests/integration/ -v --tb=short || echo "‚ö†Ô∏è Some integration tests failed"
        
    - name: Check if build should proceed
      id: check
      run: |
        # Always proceed for now, but this could be enhanced with quality gates
        echo "should-build=true" >> $GITHUB_OUTPUT
        echo "‚úÖ Quality checks completed, proceeding with build"

  # Job 2: Build Windows executable
  build-windows:
    needs: test-and-quality
    if: needs.test-and-quality.outputs.should-build == 'true'
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -e ".[dev]"
        
    - name: Verify installation and imports
      run: |
        Write-Host "üîç Verifying Python installation and critical imports..."
        python --version
        python -c "import sys; print(f'Python: {sys.version}')"
        python -c "import PySide6; print(f'PySide6: {PySide6.__version__}')"
        python -c "import pandas; print(f'Pandas: {pandas.__version__}')"
        python -c "import yaml; print('PyYAML: OK')"
        python -c "import requests; print(f'Requests: {requests.__version__}')"
        python -c "import win32com.client; print('Win32com: OK')"
        python -c "import psutil; print(f'psutil: {psutil.__version__}')"
        Write-Host "‚úÖ All critical imports successful"
        
    - name: Verify build assets
      run: |
        Write-Host "üîç Verifying build assets..."
        if (Test-Path "scripts\build\build_windows.py") {
          Write-Host "‚úÖ Windows build script found"
        } else {
          Write-Host "‚ùå Windows build script missing"
          exit 1
        }
        
        if (Test-Path "assets\icons\csc-reach.ico") {
          Write-Host "‚úÖ Windows icon found"
        } else {
          Write-Host "‚ùå Windows icon missing"
          exit 1
        }
        
        if (Test-Path "scripts\build\build_windows.spec") {
          Write-Host "‚úÖ PyInstaller spec found"
        } else {
          Write-Host "‚ùå PyInstaller spec missing"
          exit 1
        }
        
    - name: Build Windows executable
      run: |
        Write-Host "üöÄ Building Windows executable..."
        python scripts\build\build_windows.py
        
    - name: Verify Windows build output
      run: |
        Write-Host "üîç Verifying Windows build output..."
        
        if (Test-Path "build\dist\CSC-Reach\CSC-Reach.exe") {
          Write-Host "‚úÖ Windows executable created successfully"
          $size = (Get-Item "build\dist\CSC-Reach\CSC-Reach.exe").Length / 1MB
          Write-Host "   Size: $([math]::Round($size, 1)) MB"
        } else {
          Write-Host "‚ùå Windows executable not found"
          Write-Host "Build directory contents:"
          if (Test-Path "build") { dir build -Recurse } else { Write-Host "No build directory" }
          exit 1
        }
        
    - name: Create Windows distribution
      run: |
        Write-Host "üì¶ Creating Windows distribution..."
        python scripts\build\create_windows_zip.py
        
        if (Test-Path "build\dist\CSC-Reach-Windows.zip") {
          Write-Host "‚úÖ Windows ZIP created successfully"
          $size = (Get-Item "build\dist\CSC-Reach-Windows.zip").Length / 1MB
          Write-Host "   Size: $([math]::Round($size, 1)) MB"
        } else {
          Write-Host "‚ö†Ô∏è Windows ZIP not created, creating manually..."
          Compress-Archive -Path "build\dist\CSC-Reach\*" -DestinationPath "build\dist\CSC-Reach-Windows.zip"
          Write-Host "‚úÖ Manual ZIP created"
        }
        
    - name: Upload Windows executable
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.APP_NAME }}-Windows-${{ github.event.inputs.version || github.sha }}
        path: build/dist/CSC-Reach/
        retention-days: 30
        
    - name: Upload Windows ZIP
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.APP_NAME }}-Windows-ZIP-${{ github.event.inputs.version || github.sha }}
        path: build/dist/CSC-Reach-Windows.zip
        retention-days: 30

  # Job 3: Build macOS application
  build-macos:
    needs: test-and-quality
    if: needs.test-and-quality.outputs.should-build == 'true'
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/Library/Caches/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -e ".[dev]"
        
    - name: Verify installation and imports
      run: |
        echo "üîç Verifying Python installation and critical imports..."
        python --version
        python -c "import sys; print(f'Python: {sys.version}')"
        python -c "import PySide6; print(f'PySide6: {PySide6.__version__}')"
        python -c "import pandas; print(f'Pandas: {pandas.__version__}')"
        python -c "import yaml; print('PyYAML: OK')"
        python -c "import requests; print(f'Requests: {requests.__version__}')"
        python -c "import psutil; print(f'psutil: {psutil.__version__}')"
        echo "‚úÖ All critical imports successful"
        
    - name: Verify build assets
      run: |
        echo "üîç Verifying build assets..."
        if [ -f "scripts/build/build_macos.py" ]; then
          echo "‚úÖ macOS build script found"
        else
          echo "‚ùå macOS build script missing"
          exit 1
        fi
        
        if [ -f "assets/icons/csc-reach.icns" ]; then
          echo "‚úÖ macOS icon found"
        elif [ -f "assets/icons/csc-reach.png" ]; then
          echo "‚úÖ macOS icon (PNG) found"
        else
          echo "‚ùå macOS icon missing"
          exit 1
        fi
        
        if [ -f "scripts/build/build_macos.spec" ]; then
          echo "‚úÖ PyInstaller spec found"
        else
          echo "‚ùå PyInstaller spec missing"
          exit 1
        fi
        
    - name: Build macOS application
      run: |
        echo "üöÄ Building macOS application..."
        python scripts/build/build_macos.py
        
    - name: Verify macOS build output
      run: |
        echo "üîç Verifying macOS build output..."
        
        if [ -d "build/dist/CSC-Reach.app" ]; then
          echo "‚úÖ macOS application created successfully"
          size=$(du -sh "build/dist/CSC-Reach.app" | cut -f1)
          echo "   Size: $size"
        else
          echo "‚ùå macOS application not found"
          echo "Build directory contents:"
          if [ -d "build" ]; then
            find build -type f -name "*.app" -o -name "CSC-Reach*" | head -20
          else
            echo "No build directory"
          fi
          exit 1
        fi
        
    - name: Create macOS DMG (if script exists)
      run: |
        if [ -f "scripts/build/create_dmg.py" ]; then
          echo "üì¶ Creating macOS DMG..."
          python scripts/build/create_dmg.py
          
          if [ -f "build/dist/CSC-Reach-macOS.dmg" ]; then
            echo "‚úÖ macOS DMG created successfully"
            size=$(du -sh "build/dist/CSC-Reach-macOS.dmg" | cut -f1)
            echo "   Size: $size"
          else
            echo "‚ö†Ô∏è DMG creation failed, but continuing..."
          fi
        else
          echo "‚ö†Ô∏è DMG creation script not found, skipping..."
        fi
        
    - name: Upload macOS application
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.APP_NAME }}-macOS-${{ github.event.inputs.version || github.sha }}
        path: build/dist/CSC-Reach.app/
        retention-days: 30
        
    - name: Upload macOS DMG (if exists)
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.APP_NAME }}-macOS-DMG-${{ github.event.inputs.version || github.sha }}
        path: build/dist/*.dmg
        retention-days: 30
        if-no-files-found: warn

  # Job 4: Create release (only on tags or manual release)
  create-release:
    needs: [build-windows, build-macos]
    if: startsWith(github.ref, 'refs/tags/') || (github.event_name == 'workflow_dispatch' && github.event.inputs.release_type == 'production')
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
        
    - name: Prepare release assets
      run: |
        echo "üì¶ Preparing release assets..."
        mkdir -p ./release-assets
        
        # Find and copy Windows ZIP
        find ./artifacts -name "*.zip" -type f -exec cp {} ./release-assets/ \;
        
        # Find and copy macOS DMG
        find ./artifacts -name "*.dmg" -type f -exec cp {} ./release-assets/ \;
        
        # List prepared assets
        echo "Release assets prepared:"
        ls -la ./release-assets/
        
    - name: Generate release notes
      id: release-notes
      run: |
        echo "üìù Generating release notes..."
        
        # Get version from tag or input
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION="${{ github.event.inputs.version || 'latest' }}"
        fi
        
        # Create release notes
        cat > release-notes.md << EOF
        # CSC-Reach $VERSION
        
        ## üöÄ What's New
        
        This release includes the latest improvements and bug fixes for CSC-Reach.
        
        ## üì¶ Downloads
        
        - **Windows**: Download \`CSC-Reach-Windows.zip\` and extract to your desired location
        - **macOS**: Download \`CSC-Reach-macOS.dmg\` and drag the app to your Applications folder
        
        ## üîß System Requirements
        
        ### Windows
        - Windows 10 or later
        - Microsoft Outlook installed and configured
        - 4GB RAM minimum
        
        ### macOS
        - macOS 10.14 or later
        - Microsoft Outlook for Mac installed and configured
        - 4GB RAM minimum
        
        ## üìã Installation Instructions
        
        Detailed installation guides are available in the repository documentation.
        
        ## üêõ Bug Reports
        
        If you encounter any issues, please report them in the GitHub Issues section.
        
        ---
        
        **Build Information:**
        - Build Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        - Commit: ${{ github.sha }}
        - Workflow: ${{ github.run_id }}
        EOF
        
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.release-notes.outputs.VERSION }}
        name: CSC-Reach ${{ steps.release-notes.outputs.VERSION }}
        body_path: release-notes.md
        files: ./release-assets/*
        draft: false
        prerelease: ${{ github.event.inputs.release_type != 'production' }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Job 5: Test built applications
  test-builds:
    needs: [build-windows, build-macos]
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        include:
          - os: windows-latest
            artifact-name: CSC-Reach-Windows
            executable: CSC-Reach.exe
          - os: macos-latest
            artifact-name: CSC-Reach-macOS
            executable: CSC-Reach.app
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Download built application
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.artifact-name }}-${{ github.event.inputs.version || github.sha }}
        path: ./test-app/
        
    - name: Test application (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        Write-Host "üß™ Testing Windows application..."
        cd test-app
        
        if (Test-Path "CSC-Reach.exe") {
          Write-Host "‚úÖ Executable found"
          $fileInfo = Get-Item "CSC-Reach.exe"
          Write-Host "   Size: $([math]::Round($fileInfo.Length / 1MB, 1)) MB"
          Write-Host "   Created: $($fileInfo.CreationTime)"
          
          # Test that it's a valid PE file
          $signature = Get-Content "CSC-Reach.exe" -Encoding Byte -TotalCount 2
          if ($signature[0] -eq 77 -and $signature[1] -eq 90) {
            Write-Host "‚úÖ Valid PE executable"
          } else {
            Write-Host "‚ùå Invalid executable format"
            exit 1
          }
        } else {
          Write-Host "‚ùå Executable not found"
          Write-Host "Available files:"
          dir
          exit 1
        }
        
    - name: Test application (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        echo "üß™ Testing macOS application..."
        cd test-app
        
        if [ -d "CSC-Reach.app" ]; then
          echo "‚úÖ Application bundle found"
          size=$(du -sh "CSC-Reach.app" | cut -f1)
          echo "   Size: $size"
          
          # Check if it's a valid app bundle
          if [ -f "CSC-Reach.app/Contents/Info.plist" ]; then
            echo "‚úÖ Valid application bundle"
            
            # Check executable
            if [ -f "CSC-Reach.app/Contents/MacOS/CSC-Reach" ]; then
              echo "‚úÖ Executable found in bundle"
            else
              echo "‚ùå Executable not found in bundle"
              exit 1
            fi
          else
            echo "‚ùå Invalid application bundle"
            exit 1
          fi
        else
          echo "‚ùå Application bundle not found"
          echo "Available files:"
          ls -la
          exit 1
        fi

  # Job 6: Deployment notification (optional)
  notify-completion:
    needs: [test-builds, create-release]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - name: Build Summary
      run: |
        echo "üéâ Cross-platform build workflow completed!"
        echo ""
        echo "üìä Build Results:"
        echo "- Windows Build: ${{ needs.build-windows.result }}"
        echo "- macOS Build: ${{ needs.build-macos.result }}"
        echo "- Tests: ${{ needs.test-builds.result }}"
        echo "- Release: ${{ needs.create-release.result }}"
        echo ""
        echo "üîó Workflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        
        if [[ "${{ needs.build-windows.result }}" == "success" && "${{ needs.build-macos.result }}" == "success" ]]; then
          echo "‚úÖ All builds completed successfully!"
        else
          echo "‚ö†Ô∏è Some builds may have failed. Check the logs above."
        fi