name: Build Windows Executable

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.0.0)'
        required: false
        default: 'latest'
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Debug - List repository contents
      run: |
        Write-Host "Repository root contents:"
        dir
        Write-Host "`nScripts directory:"
        if (Test-Path "scripts") { dir scripts } else { Write-Host "scripts directory not found" }
        Write-Host "`nBuild scripts directory:"
        if (Test-Path "scripts\build") { dir scripts\build } else { Write-Host "scripts\build directory not found" }
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Verify Python installation
      run: |
        python --version
        pip --version
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -e ".[dev]"
        
    - name: Verify PyInstaller installation
      run: |
        python -m PyInstaller --version
        
    - name: Test Python imports
      run: |
        Write-Host "Testing critical imports..."
        python -c "import sys; print(f'Python: {sys.version}')"
        python -c "import PySide6; print(f'PySide6: {PySide6.__version__}')"
        python -c "import pandas; print(f'Pandas: {pandas.__version__}')"
        python -c "import yaml; print('PyYAML: OK')"
        python -c "import requests; print(f'Requests: {requests.__version__}')"
        python -c "import win32com.client; print('Win32com: OK')" 
        Write-Host "‚úÖ All critical imports successful"
        
    - name: Check build script and assets exist
      run: |
        if (Test-Path "scripts\build\build_windows.py") {
          Write-Host "‚úÖ build_windows.py found"
        } else {
          Write-Host "‚ùå build_windows.py not found"
          Write-Host "Available files in scripts\build:"
          if (Test-Path "scripts\build") { dir scripts\build } else { Write-Host "scripts\build directory not found" }
          exit 1
        }
        
        if (Test-Path "assets\icons\csc-reach.ico") {
          Write-Host "‚úÖ Icon file found"
        } else {
          Write-Host "‚ùå Icon file not found at assets\icons\csc-reach.ico"
          Write-Host "Available icon files:"
          if (Test-Path "assets\icons") { dir assets\icons } else { Write-Host "assets\icons directory not found" }
        }
        
        if (Test-Path "scripts\build\build_windows.spec") {
          Write-Host "‚úÖ PyInstaller spec file found"
        } else {
          Write-Host "‚ùå PyInstaller spec file not found"
        }
        
    - name: Build Windows executable
      run: |
        Write-Host "üöÄ Starting Windows build process..."
        python scripts\build\build_windows.py
      continue-on-error: false
        
    - name: Check build output
      run: |
        Write-Host "Build directory contents:"
        if (Test-Path "build") { dir build -Recurse } else { Write-Host "build directory not found" }
        
        # Check for build logs
        if (Test-Path "build\logs") {
          Write-Host "`nBuild logs:"
          dir build\logs
          if (Test-Path "build\logs\build_windows_error.log") {
            Write-Host "`n‚ùå Error log found:"
            Get-Content "build\logs\build_windows_error.log" | Select-Object -Last 50
          }
          if (Test-Path "build\logs\build_windows.log") {
            Write-Host "`nüìã Build log (last 20 lines):"
            Get-Content "build\logs\build_windows.log" | Select-Object -Last 20
          }
        }
        
        if (Test-Path "build\dist\CSC-Reach\CSC-Reach.exe") {
          Write-Host "‚úÖ Windows executable created successfully"
          $size = (Get-Item "build\dist\CSC-Reach\CSC-Reach.exe").Length / 1MB
          Write-Host "   Size: $([math]::Round($size, 1)) MB"
        } else {
          Write-Host "‚ùå Windows executable not found"
          Write-Host "Expected location: build\dist\CSC-Reach\CSC-Reach.exe"
          
          # Show what was actually created
          Write-Host "`nActual build output:"
          if (Test-Path "build\dist") { 
            dir build\dist -Recurse 
          } else { 
            Write-Host "No build\dist directory found" 
          }
          exit 1
        }
        
    - name: Create Windows ZIP distribution
      run: |
        if (Test-Path "scripts\build\create_windows_zip.py") {
          python scripts\build\create_windows_zip.py
        } else {
          Write-Host "‚ö†Ô∏è create_windows_zip.py not found, creating ZIP manually"
          Compress-Archive -Path "build\dist\CSC-Reach\*" -DestinationPath "build\dist\CSC-Reach-Windows.zip"
          Write-Host "‚úÖ Manual ZIP created"
        }
        
    - name: Upload Windows executable
      uses: actions/upload-artifact@v4
      with:
        name: CSC-Reach-Windows-${{ github.event.inputs.version || 'latest' }}
        path: build/dist/CSC-Reach/
        retention-days: 30
        
    - name: Upload Windows ZIP
      uses: actions/upload-artifact@v4
      with:
        name: CSC-Reach-Windows-ZIP-${{ github.event.inputs.version || 'latest' }}
        path: build/dist/*.zip
        retention-days: 30
        if-no-files-found: warn
        
    - name: Create Release (on tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: |
          build/dist/*.zip
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-windows-build:
    needs: build-windows
    runs-on: windows-latest
    
    steps:
    - name: Download Windows executable
      uses: actions/download-artifact@v4
      with:
        name: CSC-Reach-Windows-${{ github.event.inputs.version || 'latest' }}
        path: ./test-build/
        
    - name: Test executable
      run: |
        cd test-build
        Write-Host "Test build directory contents:"
        dir
        
        if (Test-Path "CSC-Reach.exe") {
          Write-Host "‚úÖ Executable found"
          # Test that the executable exists and is a valid PE file
          $fileInfo = Get-Item "CSC-Reach.exe"
          Write-Host "   Size: $([math]::Round($fileInfo.Length / 1MB, 1)) MB"
          Write-Host "   Created: $($fileInfo.CreationTime)"
        } else {
          Write-Host "‚ùå Executable not found"
          exit 1
        }
