[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "multichannel-messaging"
version = "1.0.0"
description = "Multi-Channel Bulk Messaging System"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "CSC Development Team", email = "dev@csc-reach.com"}
]
keywords = ["messaging", "email", "whatsapp", "bulk", "automation"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Communications :: Email",
    "Topic :: Office/Business",
]
dependencies = [
    "PySide6>=6.5.0",
    "requests>=2.31.0",
    "pandas>=2.0.0",
    "pyyaml>=6.0",
    "colorlog>=6.7.0",
    "pywin32>=306; sys_platform == 'win32'",
    "pyobjc-framework-Cocoa>=9.0; sys_platform == 'darwin'",
    "pyobjc-framework-ScriptingBridge>=9.0; sys_platform == 'darwin'",
    "babel>=2.12.0",
    "python-dateutil>=2.8.0",
    "cerberus>=1.3.0",
    "chardet>=5.0.0",
    "psutil>=5.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-qt>=4.2.0",
    "pytest-cov>=4.1.0",
    "pytest-xvfb>=3.0.0",
    "pytest-mock>=3.11.0",
    "pytest-timeout>=2.1.0",
    "pytest-html>=3.2.0",
    "pytest-json-report>=1.5.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "flake8-docstrings>=1.7.0",
    "flake8-import-order>=0.18.0",
    "mypy>=1.5.0",
    "bandit>=1.7.0",
    "isort>=5.12.0",
    "coverage>=7.3.0",
    "coverage-badge>=1.1.0",
    "junitparser>=3.1.0",
    "pyinstaller>=5.13.0",
]
build = [
    "pyinstaller>=5.13.0",
    "setuptools>=61.0",
    "wheel",
]

[project.urls]
Homepage = "https://github.com/csc-reach/multichannel-messaging"
Documentation = "https://github.com/csc-reach/multichannel-messaging/docs"
Repository = "https://github.com/csc-reach/multichannel-messaging"
"Bug Tracker" = "https://github.com/csc-reach/multichannel-messaging/issues"

[project.scripts]
csc-reach = "multichannel_messaging.main:main"

[project.gui-scripts]
csc-reach-gui = "multichannel_messaging.main:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"multichannel_messaging.localization" = ["*.json"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["multichannel_messaging"]
known_third_party = ["PySide6", "pandas", "requests", "yaml", "colorlog", "babel", "cerberus", "chardet", "psutil"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "win32com.*",
    "pythoncom",
    "pywintypes",
    "ScriptingBridge",
    "Foundation",
    "objc",
    "pytest_qt.*",
]
ignore_missing_imports = true

# Coverage configuration
[tool.coverage.run]
source = ["src/multichannel_messaging"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/build/*",
    "*/dist/*",
    "*/scripts/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
ignore_errors = true
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# Bandit configuration
[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection_process_args

[tool.bandit.assert_used]
skips = ["*_test.py", "*/test_*.py"]